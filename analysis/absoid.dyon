/*
Plots Absoid Functions.

To run:

1. Install `dyongame` from https://github.com/PistonDevelopers/dyon/tree/master/interactive
2. `dyongame analysis/absoid.dyon`

For more information, see paper "Absoid Functions":
https://github.com/advancedresearch/path_semantics/blob/master/papers-wip/absoid-functions.pdf
*/

fn main() {
    ~ min_x := -1
    ~ max_x := 4
    ~ min_y := -0.2
    ~ max_y := 1.2
    ~ n := 1000
    set_event_loop(lazy: true)
    loop {
        if !next_event() {break}
        if render() {
            ~ draw_list := []
            clear(color: #ffffff)
            plot(color: #000000, f: absoid(1, 2))
            plot(color: #ff0000, f: absoid(1, 1))
            plot(color: #00ff00, f: absoid(1, 3))
            plot(color: #0000ff, f: absoid(1, 1.6))
            draw(draw_list)
        }
    }
}

fn plot__color_f(color: vec4, f: \(f64) -> f64)
~ min_x: f64, max_x: f64, min_y: f64, max_y: f64, n: f64
{
    for i n {
        x := min_x + (i/n) * (max_x - min_x)
        y := \f(x)
        p := (i/n, 1 - (y - min_y) / (max_y - min_y))
        pos := p * window_size()
        rectangle(color: color, corner: pos, size: (2, 2))
    }
}

absoid(z, n) = \(x) = if x <= 0 {1} else {1 / ((x / grab z) ^ (grab n) + 1)}
